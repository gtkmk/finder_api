package {{camelCase model}}Handler

import (
    "github.com/gin-gonic/gin"

	"github.com/em-cash/simulador.em.cash/adapter/http/routes"
	"github.com/em-cash/simulador.em.cash/adapter/http/routesConstants"
    "github.com/em-cash/simulador.em.cash/core/domain/customError"
    "github.com/em-cash/simulador.em.cash/core/domain/helper/constants"
	"github.com/em-cash/simulador.em.cash/core/port"
	"github.com/em-cash/simulador.em.cash/infra/database/repository"
	"github.com/em-cash/simulador.em.cash/core/port/repositories"
    {{camelCase model}}Usecase "github.com/em-cash/simulador.em.cash/core/usecase/{{camelCase model}}"
)

type {{requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler struct {
	connection       port.ConnectionInterface
	uuid             port.UuidInterface
	{{camelCase model}}Database repositories.{{pascalCase model}}RepositoryInterface
    customError      port.CustomErrorInterface
}

func New{{requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler(
	connection port.ConnectionInterface,
	uuid port.UuidInterface,
) port.HandlerInterface {
	return &{{requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler{
		connection: connection,
		uuid:       uuid,
        customError:      customError.NewCustomError(),
	}
}

func ({{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler *{{requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler) Handle(context *gin.Context) {
	jsonResponse := routes.NewJsonResponse(context, {{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler.connection, {{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler.uuid)

    {{camelCase model}}Id := context.Query("{{camelCase model}}-id")

    if {{camelCase model}}Id == "" {
            jsonResponse.ThrowError(
            routesConstants.MessageKeyConst,
            {{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler.customError.ThrowError(constants.FieldIsMandatoryConst, "{{camelCase model}}-id"),
            routesConstants.BadRequestConst,
        )
        return
    }

    {{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler.openTableConnection()

    {{camelCase model}}, err := {{camelCase model}}Usecase.New{{requestType}}{{pascalCase model}}{{pascalCase fileName}}(
        {{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler.{{camelCase model}}Database,
        {{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler.customError,
    ).Execute()

    if err != nil {
        jsonResponse.ThrowError(
            routesConstants.MessageKeyConst,
            {{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler.customError.ThrowError(err.Error()),
            routesConstants.BadRequestConst,
        )
        return
    }

    jsonResponse.SendJson(routesConstants.DataKeyConst, map[string]interface{}{"{{pascalCase model}}": {{model}} }, routesConstants.StatusOk)
}

func ({{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler *{{requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler) openTableConnection() {
	{{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler.{{camelCase model}}Database = repository.New{{pascalCase model}}Repository({{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler.connection)
}
