package {{camelCase model}}Handler

import (
    "github.com/gtkmk/finder_api/adapter/http/routes"
    "github.com/gtkmk/finder_api/adapter/http/routesConstants"
    "github.com/gtkmk/finder_api/core/domain/customError"
    "github.com/gtkmk/finder_api/core/domain/helper/constants"
    "github.com/gtkmk/finder_api/core/port"
    "github.com/gtkmk/finder_api/core/port/repositories"
    {{camelCase model}}Usecase "github.com/gtkmk/finder_api/core/usecase/{{camelCase model}}"
    "github.com/gtkmk/finder_api/core/usecase/sharedMethods"
    "github.com/gtkmk/finder_api/infra/database/repository"
    "github.com/gtkmk/finder_api/infra/requestEntity/{{camelCase model}}RequestEntity"
    "github.com/gin-gonic/gin"
)

type {{requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler struct {
	connection       port.ConnectionInterface
	uuid             port.UuidInterface
    {{camelCase model}}Database repositories.{{pascalCase model}}RepositoryInterface
	contextExtractor port.HttpContextValuesExtractorInterface
	customError      port.CustomErrorInterface
}

func New{{requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler(
	connection port.ConnectionInterface,
	uuid port.UuidInterface,
	contextExtractor port.HttpContextValuesExtractorInterface,
) port.HandlerInterface {
	return &{{requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler{
		connection:       connection,
		uuid:             uuid,
		contextExtractor: contextExtractor,
		customError:      customError.NewCustomError(),
	}
}

func ({{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler *{{requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler) Handle(context *gin.Context) {
	jsonResponse := routes.NewJsonResponse(context, {{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler.connection, {{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler.uuid)

	decoded{{pascalCase model}}, err := {{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler.define{{pascalCase model}}(context)

	if err != nil {
		jsonResponse.ThrowError(
			routesConstants.MessageKeyConst,
			err,
			routesConstants.BadRequestConst,
		)

		return
	}

	transaction, err := {{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler.connection.BeginTransaction()

	if err != nil {
		jsonResponse.ThrowError(
			routesConstants.MessageKeyConst,
			{{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler.customError.ThrowError(err.Error()),
			routesConstants.BadRequestConst,
		)

		return
	}

	{{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler.openTableConnection(transaction)

    rollBackAndReturn := sharedMethods.NewRollBackAndReturnError(transaction)

    {{camelCase model}}, err := {{camelCase model}}Usecase.New{{requestType}}{{pascalCase model}}{{pascalCase fileName}}(
        {{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler.{{camelCase model}}Database,
        decoded{{pascalCase model}},
        transaction,
        rollBackAndReturn,
        {{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler.customError,
    ).Execute()

	if err != nil {
		jsonResponse.ThrowError(
			routesConstants.MessageKeyConst,
			err,
			routesConstants.BadRequestConst,
		)

		return
	}

	jsonResponse.SendJson(routesConstants.DataKeyConst, map[string]interface{}{
		"{{camelCase model}}": {{camelCase model}},
	}, routesConstants.CreatedConst)
}

func ({{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler *{{requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler) define{{pascalCase model}}(context *gin.Context) (
    map[string]interface{},
	error,
) {
	decoded{{pascalCase model}}, err := {{camelCase model}}RequestEntity.CreateNew{{pascalCase model}}DecodeRequest(context)

	if err != nil {
		return nil, {{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler.customError.ThrowError(err.Error())
	}

	if err := decoded{{pascalCase model}}.Validate(); err != nil {
		return nil, {{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler.customError.ThrowError(err.Error())
	}

	if err != nil {
		return nil, {{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler.customError.ThrowError(constants.SomethingWentWrongConst, err.Error())
	}

	{{camelCase model}}Id := {{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler.uuid.GenerateUuid()

    {{camelCase model}} := map[string]interface{}{"id": {{camelCase model}}Id}

	return {{camelCase model}}, nil
}

func ({{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler *{{requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler) openTableConnection(transaction port.ConnectionInterface) {
	{{camelCase requestType}}{{pascalCase model}}{{pascalCase fileName}}Handler.{{camelCase model}}Database = repository.New{{pascalCase model}}Repository(transaction)
}
